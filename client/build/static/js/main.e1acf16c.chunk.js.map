{"version":3,"sources":["Components/LoginBtn.js","Components/Logo.js","Components/Card.js","App.js","registerServiceWorker.js","index.js","assets/images/psLogo.png"],"names":["LoginBtn","react_default","a","createElement","class","style","height","width","position","top","fontSize","React","Component","Logo","src","logo","Cards","className","overflow","Components_Logo","client","ApolloClient","uri","GET_USERS","gql","_templateObject","App","react_apollo_browser_umd","Card","Components_LoginBtn","query","_ref","loading","error","data","concat","message","console","log","allUsers","map","user","key","id","name","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e1acf16c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n\n\nclass LoginBtn extends React.Component{\n    render(){\n        return(\n    <button class=\"ui  green button\" style={{height:50,width:350, position: \"relative\", top: 200, fontSize:20 }}>LOGIN WITH GITHUB</button>\n    )\n}\n}\n\nexport default LoginBtn","import React, { Component } from \"react\";\nimport logo from \"../assets/images/psLogo.png\"\n\n\nclass Logo extends React.Component{\n    render(){\n        return(\n            <img\n            src={logo}\n            style={{ height: 350, position: \"relative\", top: 100 }}\n          />\n    )\n}\n}\n\nexport default Logo","import React, { Component } from \"react\";\nimport Logo from \"./Logo\"\n\n\n\nclass Cards extends React.Component{\n    render(){\n        return(\n        <div>\n            <div className=\"ui card\">\n            <div className=\"image\">\n              <div style={{height:200,width:290,overflow:'hidden'}}><Logo /></div>\n            </div>\n            <div className=\"content\">\n              <a className=\"header\">Kristy</a>\n              <div className=\"meta\">\n                <span className=\"date\">Joined in 2013</span>\n              </div>\n              <div className=\"description\">\n                Kristy is an art director living in New York.\n              </div>\n            </div>\n            <div className=\"extra content\">\n              <a>\n                <i className=\"user icon\"></i>\n                22 Friends\n              </a>\n            </div>\n          </div>\n\n          </div>\n          \n         \n    )\n}\n}\n\nexport default Cards","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider, Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nimport LoginBtn from \"./Components/LoginBtn\"\nimport Logo from \"./Components/Logo\"\nimport Cards from \"./Components/Card\"\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\"\n});\n\nconst GET_USERS = gql`\n  {\n    allUsers {\n      id\n      name\n    }\n  }\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div>\n          {/* =================Panel Layout =================*/}\n          <div className=\"ui  center aligned padded grid\">\n            <div className=\"ten wide white column leftPanel\">\n              <Cards />\n            \n            </div>\n\n            <div className=\"six wide column rightPanel\">\n\n              <Logo/>\n              <LoginBtn />\n              <p>this is a testing thing feel free to delete</p>\n              <br></br>\n\n            </div>\n          </div>\n          {/* =================Panel Layout================= */}\n          {/* Please do not delete the code below or rahat will cry */}\n          {/* Example Get Data from db with Graphql query */}\n          <Query query={GET_USERS}>\n            {({ loading, error, data }) => {\n              if (loading) return \"Loading...\";\n              if (error) return `Error! ${error.message}`;\n\n              console.log(\"data is\");\n              console.log(data);\n\n              return (\n                <ul>\n                  {data.allUsers.map(user => (\n                    <li key={user.id}>{user.name}</li>\n                  ))}\n                </ul>\n              );\n            }}\n          </Query>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n","module.exports = __webpack_public_path__ + \"static/media/psLogo.042ce260.png\";"],"sourceRoot":""}